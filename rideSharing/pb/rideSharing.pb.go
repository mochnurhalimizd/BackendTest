// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rideSharing.proto

/*
Package rideSharing is a generated protocol buffer package.

It is generated from these files:
	rideSharing.proto

It has these top-level messages:
	RequestStartTrip
	RequestEndTrip
	ResponseTrip
	RequestLocation
	ResponseLocation
	UserRequest
	UserResponse
	RequestUser
	RequestResponse
	RequestFilter
	AcceptUser
	AcceptResponse
*/
package rideSharing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestStartTrip struct {
	From string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=To" json:"To,omitempty"`
}

func (m *RequestStartTrip) Reset()                    { *m = RequestStartTrip{} }
func (m *RequestStartTrip) String() string            { return proto.CompactTextString(m) }
func (*RequestStartTrip) ProtoMessage()               {}
func (*RequestStartTrip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestStartTrip) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestStartTrip) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type RequestEndTrip struct {
	From     string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	To       string `protobuf:"bytes,2,opt,name=To" json:"To,omitempty"`
	Distance int32  `protobuf:"varint,3,opt,name=Distance" json:"Distance,omitempty"`
}

func (m *RequestEndTrip) Reset()                    { *m = RequestEndTrip{} }
func (m *RequestEndTrip) String() string            { return proto.CompactTextString(m) }
func (*RequestEndTrip) ProtoMessage()               {}
func (*RequestEndTrip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestEndTrip) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestEndTrip) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *RequestEndTrip) GetDistance() int32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

type ResponseTrip struct {
	From    string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *ResponseTrip) Reset()                    { *m = ResponseTrip{} }
func (m *ResponseTrip) String() string            { return proto.CompactTextString(m) }
func (*ResponseTrip) ProtoMessage()               {}
func (*ResponseTrip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResponseTrip) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ResponseTrip) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RequestLocation struct {
	From string  `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	To   string  `protobuf:"bytes,2,opt,name=To" json:"To,omitempty"`
	Lat  float32 `protobuf:"fixed32,3,opt,name=Lat" json:"Lat,omitempty"`
	Lon  float32 `protobuf:"fixed32,4,opt,name=Lon" json:"Lon,omitempty"`
}

func (m *RequestLocation) Reset()                    { *m = RequestLocation{} }
func (m *RequestLocation) String() string            { return proto.CompactTextString(m) }
func (*RequestLocation) ProtoMessage()               {}
func (*RequestLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestLocation) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestLocation) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *RequestLocation) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *RequestLocation) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type ResponseLocation struct {
	From    string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *ResponseLocation) Reset()                    { *m = ResponseLocation{} }
func (m *ResponseLocation) String() string            { return proto.CompactTextString(m) }
func (*ResponseLocation) ProtoMessage()               {}
func (*ResponseLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResponseLocation) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ResponseLocation) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UserRequest struct {
	UserName string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type UserResponse struct {
	UserName string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UserResponse) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type RequestUser struct {
	From   string  `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	Lat    float32 `protobuf:"fixed32,2,opt,name=Lat" json:"Lat,omitempty"`
	Lon    float32 `protobuf:"fixed32,3,opt,name=Lon" json:"Lon,omitempty"`
	Status string  `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *RequestUser) Reset()                    { *m = RequestUser{} }
func (m *RequestUser) String() string            { return proto.CompactTextString(m) }
func (*RequestUser) ProtoMessage()               {}
func (*RequestUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RequestUser) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestUser) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *RequestUser) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *RequestUser) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type RequestResponse struct {
	From    string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *RequestResponse) Reset()                    { *m = RequestResponse{} }
func (m *RequestResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestResponse) ProtoMessage()               {}
func (*RequestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RequestResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RequestFilter struct {
	UserKey string `protobuf:"bytes,1,opt,name=UserKey" json:"UserKey,omitempty"`
}

func (m *RequestFilter) Reset()                    { *m = RequestFilter{} }
func (m *RequestFilter) String() string            { return proto.CompactTextString(m) }
func (*RequestFilter) ProtoMessage()               {}
func (*RequestFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RequestFilter) GetUserKey() string {
	if m != nil {
		return m.UserKey
	}
	return ""
}

type AcceptUser struct {
	From string  `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	To   string  `protobuf:"bytes,2,opt,name=To" json:"To,omitempty"`
	Lat  float32 `protobuf:"fixed32,3,opt,name=Lat" json:"Lat,omitempty"`
	Lon  float32 `protobuf:"fixed32,4,opt,name=Lon" json:"Lon,omitempty"`
}

func (m *AcceptUser) Reset()                    { *m = AcceptUser{} }
func (m *AcceptUser) String() string            { return proto.CompactTextString(m) }
func (*AcceptUser) ProtoMessage()               {}
func (*AcceptUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AcceptUser) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *AcceptUser) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *AcceptUser) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *AcceptUser) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type AcceptResponse struct {
	From    string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AcceptResponse) Reset()                    { *m = AcceptResponse{} }
func (m *AcceptResponse) String() string            { return proto.CompactTextString(m) }
func (*AcceptResponse) ProtoMessage()               {}
func (*AcceptResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AcceptResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *AcceptResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*RequestStartTrip)(nil), "rideSharing.RequestStartTrip")
	proto.RegisterType((*RequestEndTrip)(nil), "rideSharing.RequestEndTrip")
	proto.RegisterType((*ResponseTrip)(nil), "rideSharing.ResponseTrip")
	proto.RegisterType((*RequestLocation)(nil), "rideSharing.RequestLocation")
	proto.RegisterType((*ResponseLocation)(nil), "rideSharing.ResponseLocation")
	proto.RegisterType((*UserRequest)(nil), "rideSharing.UserRequest")
	proto.RegisterType((*UserResponse)(nil), "rideSharing.UserResponse")
	proto.RegisterType((*RequestUser)(nil), "rideSharing.RequestUser")
	proto.RegisterType((*RequestResponse)(nil), "rideSharing.RequestResponse")
	proto.RegisterType((*RequestFilter)(nil), "rideSharing.RequestFilter")
	proto.RegisterType((*AcceptUser)(nil), "rideSharing.AcceptUser")
	proto.RegisterType((*AcceptResponse)(nil), "rideSharing.AcceptResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RideSharing service

type RideSharingClient interface {
	Connect(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	SendPresence(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	SendRequest(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*RequestResponse, error)
	// rpc GetRequestStatus(RequestFilter) returns (RequestUser){}
	AcceptRequest(ctx context.Context, in *AcceptUser, opts ...grpc.CallOption) (*AcceptResponse, error)
	SendLocation(ctx context.Context, in *RequestLocation, opts ...grpc.CallOption) (*ResponseLocation, error)
	StartTrip(ctx context.Context, in *RequestStartTrip, opts ...grpc.CallOption) (*ResponseTrip, error)
	EndTrip(ctx context.Context, in *RequestEndTrip, opts ...grpc.CallOption) (*ResponseTrip, error)
}

type rideSharingClient struct {
	cc *grpc.ClientConn
}

func NewRideSharingClient(cc *grpc.ClientConn) RideSharingClient {
	return &rideSharingClient{cc}
}

func (c *rideSharingClient) Connect(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/rideSharing.rideSharing/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideSharingClient) SendPresence(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/rideSharing.rideSharing/SendPresence", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideSharingClient) SendRequest(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*RequestResponse, error) {
	out := new(RequestResponse)
	err := grpc.Invoke(ctx, "/rideSharing.rideSharing/SendRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideSharingClient) AcceptRequest(ctx context.Context, in *AcceptUser, opts ...grpc.CallOption) (*AcceptResponse, error) {
	out := new(AcceptResponse)
	err := grpc.Invoke(ctx, "/rideSharing.rideSharing/AcceptRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideSharingClient) SendLocation(ctx context.Context, in *RequestLocation, opts ...grpc.CallOption) (*ResponseLocation, error) {
	out := new(ResponseLocation)
	err := grpc.Invoke(ctx, "/rideSharing.rideSharing/SendLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideSharingClient) StartTrip(ctx context.Context, in *RequestStartTrip, opts ...grpc.CallOption) (*ResponseTrip, error) {
	out := new(ResponseTrip)
	err := grpc.Invoke(ctx, "/rideSharing.rideSharing/startTrip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideSharingClient) EndTrip(ctx context.Context, in *RequestEndTrip, opts ...grpc.CallOption) (*ResponseTrip, error) {
	out := new(ResponseTrip)
	err := grpc.Invoke(ctx, "/rideSharing.rideSharing/endTrip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RideSharing service

type RideSharingServer interface {
	Connect(context.Context, *UserRequest) (*UserResponse, error)
	SendPresence(context.Context, *UserRequest) (*UserResponse, error)
	SendRequest(context.Context, *RequestUser) (*RequestResponse, error)
	// rpc GetRequestStatus(RequestFilter) returns (RequestUser){}
	AcceptRequest(context.Context, *AcceptUser) (*AcceptResponse, error)
	SendLocation(context.Context, *RequestLocation) (*ResponseLocation, error)
	StartTrip(context.Context, *RequestStartTrip) (*ResponseTrip, error)
	EndTrip(context.Context, *RequestEndTrip) (*ResponseTrip, error)
}

func RegisterRideSharingServer(s *grpc.Server, srv RideSharingServer) {
	s.RegisterService(&_RideSharing_serviceDesc, srv)
}

func _RideSharing_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideSharingServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rideSharing.rideSharing/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideSharingServer).Connect(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideSharing_SendPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideSharingServer).SendPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rideSharing.rideSharing/SendPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideSharingServer).SendPresence(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideSharing_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideSharingServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rideSharing.rideSharing/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideSharingServer).SendRequest(ctx, req.(*RequestUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideSharing_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideSharingServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rideSharing.rideSharing/AcceptRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideSharingServer).AcceptRequest(ctx, req.(*AcceptUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideSharing_SendLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideSharingServer).SendLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rideSharing.rideSharing/SendLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideSharingServer).SendLocation(ctx, req.(*RequestLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideSharing_StartTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartTrip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideSharingServer).StartTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rideSharing.rideSharing/StartTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideSharingServer).StartTrip(ctx, req.(*RequestStartTrip))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideSharing_EndTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEndTrip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideSharingServer).EndTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rideSharing.rideSharing/EndTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideSharingServer).EndTrip(ctx, req.(*RequestEndTrip))
	}
	return interceptor(ctx, in, info, handler)
}

var _RideSharing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rideSharing.rideSharing",
	HandlerType: (*RideSharingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _RideSharing_Connect_Handler,
		},
		{
			MethodName: "SendPresence",
			Handler:    _RideSharing_SendPresence_Handler,
		},
		{
			MethodName: "SendRequest",
			Handler:    _RideSharing_SendRequest_Handler,
		},
		{
			MethodName: "AcceptRequest",
			Handler:    _RideSharing_AcceptRequest_Handler,
		},
		{
			MethodName: "SendLocation",
			Handler:    _RideSharing_SendLocation_Handler,
		},
		{
			MethodName: "startTrip",
			Handler:    _RideSharing_StartTrip_Handler,
		},
		{
			MethodName: "endTrip",
			Handler:    _RideSharing_EndTrip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rideSharing.proto",
}

func init() { proto.RegisterFile("rideSharing.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xb7, 0x69, 0xd9, 0x6e, 0x27, 0xdd, 0xb2, 0xf8, 0x00, 0x21, 0xcb, 0x4a, 0x2b, 0x9f,
	0x16, 0x0e, 0x7b, 0x00, 0x89, 0x13, 0x82, 0xa2, 0xd2, 0x72, 0xa0, 0xa0, 0x2a, 0x0d, 0x07, 0x0e,
	0x1c, 0x82, 0x3b, 0x82, 0x48, 0xd4, 0x0e, 0xb6, 0x7b, 0xe0, 0x01, 0x78, 0x6f, 0x64, 0xc7, 0x31,
	0x49, 0x49, 0xab, 0x6e, 0x6f, 0x99, 0x19, 0xfb, 0xf3, 0xff, 0x8f, 0xe3, 0x81, 0x07, 0x32, 0x5f,
	0xe1, 0xf2, 0x47, 0x26, 0x73, 0xfe, 0xfd, 0xb6, 0x90, 0x42, 0x0b, 0x12, 0xd6, 0x52, 0xf4, 0x25,
	0x5c, 0x24, 0xf8, 0x6b, 0x83, 0x4a, 0x2f, 0x75, 0x26, 0x75, 0x2a, 0xf3, 0x82, 0x10, 0xe8, 0xcd,
	0xa4, 0x58, 0x47, 0x9d, 0xeb, 0xce, 0xcd, 0x20, 0xb1, 0xdf, 0x64, 0x04, 0x41, 0x2a, 0xa2, 0xc0,
	0x66, 0x82, 0x54, 0xd0, 0x05, 0x8c, 0xdc, 0xbe, 0x29, 0x5f, 0x1d, 0xba, 0x8b, 0xc4, 0x70, 0xf6,
	0x2e, 0x57, 0x3a, 0xe3, 0x0c, 0xa3, 0xee, 0x75, 0xe7, 0xe6, 0x5e, 0xe2, 0x63, 0xfa, 0x0a, 0x86,
	0x09, 0xaa, 0x42, 0x70, 0x85, 0x3b, 0x79, 0x11, 0xf4, 0xd5, 0x86, 0x31, 0x54, 0xca, 0x42, 0xcf,
	0x92, 0x2a, 0xa4, 0x5f, 0xe0, 0xbe, 0xd3, 0x33, 0x17, 0x2c, 0xd3, 0xb9, 0xe0, 0x07, 0x09, 0xba,
	0x80, 0xee, 0x3c, 0xd3, 0x56, 0x4b, 0x90, 0x98, 0x4f, 0x9b, 0x11, 0x3c, 0xea, 0xb9, 0x8c, 0xe0,
	0x74, 0x6c, 0x5a, 0x54, 0x0a, 0xdb, 0xcb, 0xde, 0x2d, 0xee, 0x29, 0x84, 0x9f, 0x15, 0x4a, 0x27,
	0xd0, 0x74, 0xc1, 0x84, 0x9f, 0xb2, 0x35, 0x3a, 0x80, 0x8f, 0xe9, 0x33, 0x18, 0x96, 0x4b, 0xcb,
	0x03, 0xf7, 0xae, 0xfd, 0x0a, 0xa1, 0x43, 0x9a, 0x54, 0xab, 0x26, 0xe7, 0x2f, 0xf8, 0xcf, 0x5f,
	0xd7, 0xfb, 0x23, 0x0f, 0xe1, 0x54, 0xe9, 0x4c, 0x6f, 0x94, 0x35, 0x3d, 0x48, 0x5c, 0x44, 0xdf,
	0xf8, 0x96, 0x7a, 0x35, 0x77, 0xb5, 0x7d, 0xee, 0x00, 0xb3, 0xfc, 0xa7, 0x46, 0x69, 0x96, 0x1a,
	0xa5, 0x1f, 0xf0, 0xb7, 0x23, 0x54, 0x21, 0x4d, 0x01, 0xde, 0x32, 0x86, 0xc5, 0x6e, 0x27, 0xc7,
	0xdc, 0xdc, 0x6b, 0x18, 0x95, 0xd4, 0xe3, 0x0c, 0x3c, 0xff, 0xd3, 0x83, 0xfa, 0x63, 0x21, 0x63,
	0xe8, 0x4f, 0x04, 0xe7, 0xc8, 0x34, 0x89, 0x6e, 0xeb, 0x0f, 0xab, 0x76, 0xbb, 0xf1, 0xe3, 0x96,
	0x4a, 0x79, 0x3a, 0x3d, 0x21, 0x53, 0x18, 0x2e, 0x91, 0xaf, 0x16, 0x12, 0x15, 0x72, 0x86, 0xc7,
	0x62, 0xde, 0x43, 0x68, 0x30, 0xd5, 0x0f, 0xd5, 0xa4, 0xd4, 0xfe, 0x89, 0xf8, 0x49, 0x5b, 0xa5,
	0x01, 0x3a, 0xaf, 0x3a, 0x54, 0xa2, 0x1e, 0x35, 0x36, 0xfc, 0xbb, 0x93, 0xf8, 0xb2, 0xa5, 0x50,
	0x03, 0x7d, 0x2c, 0x8d, 0xf9, 0x07, 0xd2, 0x7a, 0x70, 0x55, 0x8d, 0xaf, 0xb6, 0xaa, 0xcd, 0xd7,
	0x65, 0x75, 0x0d, 0x94, 0x9f, 0x47, 0x57, 0x6d, 0x2c, 0x3f, 0xae, 0xb6, 0x3a, 0x55, 0x9f, 0x21,
	0xf4, 0x84, 0x4c, 0xa0, 0x8f, 0x6e, 0x40, 0x5d, 0xb6, 0x61, 0xdc, 0xf4, 0xda, 0x0b, 0xf9, 0x76,
	0x6a, 0x07, 0xe7, 0x8b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xff, 0x9f, 0x5a, 0x4d, 0x05,
	0x00, 0x00,
}
