// Code generated by protoc-gen-go. DO NOT EDIT.
// source: driver.proto

/*
Package driver is a generated protocol buffer package.

It is generated from these files:
	driver.proto

It has these top-level messages:
	RequestEndTrip
	RequestStartTrip
	ResponseTrip
	AcceptUser
	AcceptResponse
	RequestLocation
	RequestResponse
	ResponseLocation
	RequestUser
	RequestFilter
*/
package driver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestEndTrip struct {
	From     string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	To       string `protobuf:"bytes,2,opt,name=To" json:"To,omitempty"`
	Distance int32  `protobuf:"varint,3,opt,name=Distance" json:"Distance,omitempty"`
}

func (m *RequestEndTrip) Reset()                    { *m = RequestEndTrip{} }
func (m *RequestEndTrip) String() string            { return proto.CompactTextString(m) }
func (*RequestEndTrip) ProtoMessage()               {}
func (*RequestEndTrip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestEndTrip) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestEndTrip) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *RequestEndTrip) GetDistance() int32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

type RequestStartTrip struct {
	From string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=To" json:"To,omitempty"`
}

func (m *RequestStartTrip) Reset()                    { *m = RequestStartTrip{} }
func (m *RequestStartTrip) String() string            { return proto.CompactTextString(m) }
func (*RequestStartTrip) ProtoMessage()               {}
func (*RequestStartTrip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestStartTrip) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestStartTrip) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type ResponseTrip struct {
	From    string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *ResponseTrip) Reset()                    { *m = ResponseTrip{} }
func (m *ResponseTrip) String() string            { return proto.CompactTextString(m) }
func (*ResponseTrip) ProtoMessage()               {}
func (*ResponseTrip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResponseTrip) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ResponseTrip) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type AcceptUser struct {
	From string  `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	To   string  `protobuf:"bytes,2,opt,name=To" json:"To,omitempty"`
	Lat  float32 `protobuf:"fixed32,3,opt,name=Lat" json:"Lat,omitempty"`
	Lon  float32 `protobuf:"fixed32,4,opt,name=Lon" json:"Lon,omitempty"`
}

func (m *AcceptUser) Reset()                    { *m = AcceptUser{} }
func (m *AcceptUser) String() string            { return proto.CompactTextString(m) }
func (*AcceptUser) ProtoMessage()               {}
func (*AcceptUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AcceptUser) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *AcceptUser) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *AcceptUser) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *AcceptUser) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type AcceptResponse struct {
	From    string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AcceptResponse) Reset()                    { *m = AcceptResponse{} }
func (m *AcceptResponse) String() string            { return proto.CompactTextString(m) }
func (*AcceptResponse) ProtoMessage()               {}
func (*AcceptResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AcceptResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *AcceptResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RequestLocation struct {
	From string  `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	To   string  `protobuf:"bytes,2,opt,name=To" json:"To,omitempty"`
	Lat  float32 `protobuf:"fixed32,3,opt,name=Lat" json:"Lat,omitempty"`
	Lon  float32 `protobuf:"fixed32,4,opt,name=Lon" json:"Lon,omitempty"`
}

func (m *RequestLocation) Reset()                    { *m = RequestLocation{} }
func (m *RequestLocation) String() string            { return proto.CompactTextString(m) }
func (*RequestLocation) ProtoMessage()               {}
func (*RequestLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RequestLocation) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestLocation) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *RequestLocation) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *RequestLocation) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type RequestResponse struct {
	From    string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *RequestResponse) Reset()                    { *m = RequestResponse{} }
func (m *RequestResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestResponse) ProtoMessage()               {}
func (*RequestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RequestResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ResponseLocation struct {
	From    string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *ResponseLocation) Reset()                    { *m = ResponseLocation{} }
func (m *ResponseLocation) String() string            { return proto.CompactTextString(m) }
func (*ResponseLocation) ProtoMessage()               {}
func (*ResponseLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResponseLocation) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ResponseLocation) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RequestUser struct {
	From   string  `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	Lat    float32 `protobuf:"fixed32,2,opt,name=Lat" json:"Lat,omitempty"`
	Lon    float32 `protobuf:"fixed32,3,opt,name=Lon" json:"Lon,omitempty"`
	Status string  `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *RequestUser) Reset()                    { *m = RequestUser{} }
func (m *RequestUser) String() string            { return proto.CompactTextString(m) }
func (*RequestUser) ProtoMessage()               {}
func (*RequestUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RequestUser) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestUser) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *RequestUser) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *RequestUser) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type RequestFilter struct {
	UserKey string `protobuf:"bytes,1,opt,name=UserKey" json:"UserKey,omitempty"`
}

func (m *RequestFilter) Reset()                    { *m = RequestFilter{} }
func (m *RequestFilter) String() string            { return proto.CompactTextString(m) }
func (*RequestFilter) ProtoMessage()               {}
func (*RequestFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RequestFilter) GetUserKey() string {
	if m != nil {
		return m.UserKey
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestEndTrip)(nil), "driver.RequestEndTrip")
	proto.RegisterType((*RequestStartTrip)(nil), "driver.RequestStartTrip")
	proto.RegisterType((*ResponseTrip)(nil), "driver.ResponseTrip")
	proto.RegisterType((*AcceptUser)(nil), "driver.AcceptUser")
	proto.RegisterType((*AcceptResponse)(nil), "driver.AcceptResponse")
	proto.RegisterType((*RequestLocation)(nil), "driver.RequestLocation")
	proto.RegisterType((*RequestResponse)(nil), "driver.RequestResponse")
	proto.RegisterType((*ResponseLocation)(nil), "driver.ResponseLocation")
	proto.RegisterType((*RequestUser)(nil), "driver.RequestUser")
	proto.RegisterType((*RequestFilter)(nil), "driver.RequestFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Driver service

type DriverClient interface {
	GetRequestUser(ctx context.Context, in *RequestFilter, opts ...grpc.CallOption) (Driver_GetRequestUserClient, error)
	ReceiveRequest(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*RequestResponse, error)
	AcceptRequest(ctx context.Context, in *AcceptUser, opts ...grpc.CallOption) (*AcceptResponse, error)
	SendLocation(ctx context.Context, in *RequestLocation, opts ...grpc.CallOption) (*ResponseLocation, error)
	StartTrip(ctx context.Context, in *RequestStartTrip, opts ...grpc.CallOption) (*ResponseTrip, error)
	EndTrip(ctx context.Context, in *RequestEndTrip, opts ...grpc.CallOption) (*ResponseTrip, error)
}

type driverClient struct {
	cc *grpc.ClientConn
}

func NewDriverClient(cc *grpc.ClientConn) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) GetRequestUser(ctx context.Context, in *RequestFilter, opts ...grpc.CallOption) (Driver_GetRequestUserClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Driver_serviceDesc.Streams[0], c.cc, "/driver.driver/GetRequestUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverGetRequestUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Driver_GetRequestUserClient interface {
	Recv() (*RequestUser, error)
	grpc.ClientStream
}

type driverGetRequestUserClient struct {
	grpc.ClientStream
}

func (x *driverGetRequestUserClient) Recv() (*RequestUser, error) {
	m := new(RequestUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverClient) ReceiveRequest(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*RequestResponse, error) {
	out := new(RequestResponse)
	err := grpc.Invoke(ctx, "/driver.driver/ReceiveRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) AcceptRequest(ctx context.Context, in *AcceptUser, opts ...grpc.CallOption) (*AcceptResponse, error) {
	out := new(AcceptResponse)
	err := grpc.Invoke(ctx, "/driver.driver/AcceptRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SendLocation(ctx context.Context, in *RequestLocation, opts ...grpc.CallOption) (*ResponseLocation, error) {
	out := new(ResponseLocation)
	err := grpc.Invoke(ctx, "/driver.driver/SendLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) StartTrip(ctx context.Context, in *RequestStartTrip, opts ...grpc.CallOption) (*ResponseTrip, error) {
	out := new(ResponseTrip)
	err := grpc.Invoke(ctx, "/driver.driver/startTrip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) EndTrip(ctx context.Context, in *RequestEndTrip, opts ...grpc.CallOption) (*ResponseTrip, error) {
	out := new(ResponseTrip)
	err := grpc.Invoke(ctx, "/driver.driver/endTrip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Driver service

type DriverServer interface {
	GetRequestUser(*RequestFilter, Driver_GetRequestUserServer) error
	ReceiveRequest(context.Context, *RequestUser) (*RequestResponse, error)
	AcceptRequest(context.Context, *AcceptUser) (*AcceptResponse, error)
	SendLocation(context.Context, *RequestLocation) (*ResponseLocation, error)
	StartTrip(context.Context, *RequestStartTrip) (*ResponseTrip, error)
	EndTrip(context.Context, *RequestEndTrip) (*ResponseTrip, error)
}

func RegisterDriverServer(s *grpc.Server, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_GetRequestUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DriverServer).GetRequestUser(m, &driverGetRequestUserServer{stream})
}

type Driver_GetRequestUserServer interface {
	Send(*RequestUser) error
	grpc.ServerStream
}

type driverGetRequestUserServer struct {
	grpc.ServerStream
}

func (x *driverGetRequestUserServer) Send(m *RequestUser) error {
	return x.ServerStream.SendMsg(m)
}

func _Driver_ReceiveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).ReceiveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.driver/ReceiveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).ReceiveRequest(ctx, req.(*RequestUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.driver/AcceptRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).AcceptRequest(ctx, req.(*AcceptUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SendLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SendLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.driver/SendLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SendLocation(ctx, req.(*RequestLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_StartTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartTrip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).StartTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.driver/StartTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).StartTrip(ctx, req.(*RequestStartTrip))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_EndTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEndTrip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).EndTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.driver/EndTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).EndTrip(ctx, req.(*RequestEndTrip))
	}
	return interceptor(ctx, in, info, handler)
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "driver.driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveRequest",
			Handler:    _Driver_ReceiveRequest_Handler,
		},
		{
			MethodName: "AcceptRequest",
			Handler:    _Driver_AcceptRequest_Handler,
		},
		{
			MethodName: "SendLocation",
			Handler:    _Driver_SendLocation_Handler,
		},
		{
			MethodName: "startTrip",
			Handler:    _Driver_StartTrip_Handler,
		},
		{
			MethodName: "endTrip",
			Handler:    _Driver_EndTrip_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRequestUser",
			Handler:       _Driver_GetRequestUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "driver.proto",
}

func init() { proto.RegisterFile("driver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x4f, 0xdb, 0x30,
	0x14, 0x6e, 0x92, 0xae, 0x3f, 0xde, 0xda, 0xac, 0xf2, 0xb6, 0x2e, 0xca, 0xa9, 0xf2, 0xa9, 0xbb,
	0x54, 0xd3, 0x26, 0x4d, 0x9a, 0xb4, 0x8d, 0x22, 0xa0, 0x1c, 0xe8, 0x01, 0xb9, 0xe1, 0xc0, 0x81,
	0x43, 0x48, 0xdf, 0x21, 0x12, 0xc4, 0xc1, 0x76, 0x2b, 0xf1, 0x2f, 0xf0, 0x57, 0xa3, 0x38, 0x4e,
	0xda, 0x06, 0x82, 0x0a, 0xe2, 0xe6, 0xf7, 0xd9, 0xdf, 0xe7, 0xef, 0xf9, 0x3d, 0x3f, 0xe8, 0x2d,
	0x45, 0xbc, 0x46, 0x31, 0x49, 0x05, 0x57, 0x9c, 0xb4, 0xf2, 0x88, 0x9e, 0x83, 0xcb, 0xf0, 0x6e,
	0x85, 0x52, 0x9d, 0x24, 0xcb, 0x40, 0xc4, 0x29, 0x21, 0xd0, 0x9c, 0x09, 0x7e, 0xeb, 0x59, 0x23,
	0x6b, 0xdc, 0x65, 0x7a, 0x4d, 0x5c, 0xb0, 0x03, 0xee, 0xd9, 0x1a, 0xb1, 0x03, 0x4e, 0x7c, 0xe8,
	0x1c, 0xc7, 0x52, 0x85, 0x49, 0x84, 0x9e, 0x33, 0xb2, 0xc6, 0x1f, 0x58, 0x19, 0xd3, 0xdf, 0x30,
	0x30, 0x8a, 0x0b, 0x15, 0x0a, 0xb5, 0xaf, 0x26, 0xfd, 0x0b, 0x3d, 0x86, 0x32, 0xe5, 0x89, 0xc4,
	0x5a, 0x8e, 0x07, 0x6d, 0xb9, 0x8a, 0x22, 0x94, 0x52, 0x13, 0x3b, 0xac, 0x08, 0x69, 0x00, 0x70,
	0x18, 0x45, 0x98, 0xaa, 0x0b, 0x89, 0x62, 0xaf, 0x1c, 0x06, 0xe0, 0xcc, 0x43, 0xa5, 0xed, 0xdb,
	0x2c, 0x5b, 0x6a, 0x84, 0x27, 0x5e, 0xd3, 0x20, 0x3c, 0xa1, 0xff, 0xc1, 0xcd, 0x55, 0x0b, 0x67,
	0xaf, 0x74, 0x75, 0x09, 0x9f, 0xcc, 0x5b, 0xcc, 0x79, 0x14, 0xaa, 0x98, 0x27, 0xef, 0x66, 0xed,
	0xa0, 0x94, 0x7e, 0xa3, 0xb7, 0x69, 0x56, 0xa7, 0x9c, 0xf9, 0xa2, 0xb9, 0x7a, 0x85, 0x2b, 0xf8,
	0x68, 0x2c, 0xd4, 0x3e, 0xba, 0xc9, 0xc4, 0x7e, 0x92, 0x89, 0x53, 0x66, 0x42, 0x86, 0xd0, 0x92,
	0x2a, 0x54, 0x2b, 0xa9, 0xd3, 0xeb, 0x32, 0x13, 0xd1, 0xef, 0xd0, 0x37, 0xf2, 0xb3, 0xf8, 0x46,
	0xa1, 0xc8, 0x9c, 0x64, 0x17, 0x9d, 0xe1, 0xbd, 0xb9, 0xa3, 0x08, 0x7f, 0x3e, 0x38, 0x60, 0x1a,
	0x9a, 0x4c, 0xc1, 0x3d, 0x45, 0xb5, 0xed, 0xeb, 0xeb, 0xc4, 0x74, 0xfe, 0x8e, 0x9a, 0xff, 0xb9,
	0x02, 0x67, 0x67, 0x69, 0xe3, 0x87, 0x95, 0x29, 0x30, 0x8c, 0x30, 0x5e, 0xa3, 0xd9, 0x21, 0xcf,
	0x1d, 0xf5, 0xbf, 0x55, 0xc0, 0xe2, 0x31, 0x69, 0x83, 0xfc, 0x83, 0x7e, 0xd1, 0x36, 0xb9, 0x00,
	0x29, 0xce, 0x6e, 0x7a, 0xd4, 0x1f, 0xee, 0x62, 0x5b, 0xf4, 0x23, 0xe8, 0x2d, 0x30, 0x59, 0x96,
	0x55, 0xa9, 0xde, 0x54, 0x6c, 0xf8, 0xde, 0x66, 0x63, 0xb7, 0x90, 0xda, 0x43, 0x57, 0x96, 0xff,
	0xcf, 0xab, 0x28, 0x94, 0x3f, 0xd3, 0xff, 0x52, 0x95, 0xc8, 0x50, 0xda, 0x20, 0x7f, 0xa0, 0x8d,
	0x66, 0x20, 0x0c, 0x2b, 0x64, 0x33, 0x28, 0xea, 0xa8, 0xd7, 0x2d, 0x3d, 0x61, 0x7e, 0x3d, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x59, 0x99, 0xfc, 0x5d, 0x71, 0x04, 0x00, 0x00,
}
